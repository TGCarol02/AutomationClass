{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Bootcamp automatizaci\'f3n\
\
S1\
Agenda a trabajar en el curso - herramientas a utilizar\
\
* Fundamentos del testing QA - QC - Testing\
\
\'97 En los archivos nombrar siempre en Capital\
\
S2\
Revisi\'f3n intellinjDEA\
\
Creaci\'f3n de m\'e9todos y para que sirven\
* Siempre deber\'e1s tener un m\'e9todo Main para ejecutar c\'f3digo, lo primero que debes crear es este m\'e9todo\
* 
\f1\b modificador de accesos:
\f0\b0  permite tener argumentos y tipos de datos que aunque no tiene valor devuelve lo que el usuario ordena que muestre. Restringe el alcance de las clases, constructores, variables, m\'e9todos o campos; sus tipos son 
\f1\b Default
\f0\b0  aplica para clases y s\'f3lo podr\'e1 ser llamada por s\'ed misma o por las contenidas en su mismo paquete, 
\f1\b Private
\f0\b0  s\'f3lo puede ser ejecutado dentro de la clase que lo contiene, aplica para m\'e9todos y campos. 
\f1\b Protected
\f0\b0  s\'f3lo para todos y campos s\'f3lo pueden ser usados por su clase, clase dentro de su paquete y/o clases heredadas. 
\f1\b Public
\f0\b0  no tiene restricciones de acceso permite que se trabaje desde diferentes partes del c\'f3digo\
\
Introducci\'f3n a Programaci\'f3n Orientada a objetos\
*Ver los objetos como una colecci\'f3n, donde es clave sus funciones y actividades\
* tener c\'f3digo reutilizable y f\'e1cil de mantener\
\
Objeto: Estructura o lugar para almacenar datos\
Compuesto por datos o campos, las acciones o m\'e9todos y las formas de crearlos o constructores.\
\
Clase: Plantilla que permite definir objetos, si los objetos tienen un mismo tipo pueden ser agrupados en una clase; para crearla debe tener la informaci\'f3n a almacenar o constructores, lo que guardar\'e1 o campos y las acciones o m\'e9todos.\
\
* Para la definici\'f3n de variables se recomienda en min\'fasculas, si es larga la primera palabra min\'fascula y la siguiente inicia en Capital.\
* constructores deber\'e1 usar el mismo tipo de nombramiento que las variables y los par\'e1metros que recibir\'e1, dichos par\'e1metros deber\'e1n inicializarse.\
* tipos de variables comunes: String, int, double, float, char, boolean.\
\
* Para ejecutar una clase desde otra, deber\'e1 ser importada primero.\
* Para ejecutar un m\'e9todo privado deber\'e1 ser previamente llamado.\
\

\f1\b Principios de la programaci\'f3n orientada a objetos: 
\f0\b0 \

\f1\b Encapsulaci\'f3n
\f0\b0 : datos no accesibles de forma directa, s\'f3lo manipulables a trav\'e9s de sus funciones asociadas. \

\f1\b Abstracci\'f3n 
\f0\b0 conocemos la parte funcional pero no el proceso interno\

\f1\b Herencia 
\f0\b0 permite reutilizar c\'f3digo com\'fan, deber\'e1 tenerse definidas las clases padre y las clases hijo, los hijos tendr\'e1n todos los atributos del padre y podr\'e1n hacer uso de los mismos\

\f1\b Polimorfismo
\f0\b0  permite adaptar el c\'f3digo a la necesidad, siempre que se tengan argumentos en com\'fan que funcionen exactamente igual al ser invocados.\
\
Composici\'f3n vs agregaci\'f3n\

\f1\b Agregaci\'f3n:
\f0\b0  un objeto puede existir independiente del otro\

\f1\b Composici\'f3n:
\f0\b0  un objeto existe con dependencia de otro y s\'f3lo funciona si el otro est\'e1 en uso\
\
En las clases padre-hijo o las de tipo composici\'f3n deber\'e1 comenzar a codificar las subclases y luego la clase principal que las requiere.\
}